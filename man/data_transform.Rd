% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_transform.R
\name{data_transform}
\alias{data_transform}
\alias{Transform}
\title{Standardize \code{data.frame} for comparable \strong{Machine Learning} prediction
and visualization}
\usage{
data_transform(data, method, margin = 2)
}
\arguments{
\item{data}{A \code{data.frame} with numeric data for transformation. All columns
in the data are transformed}

\item{method}{The type of transformation. There three options. \code{1} is for
\code{log} transformation, \code{2} is for \code{min-max} transformation and \code{3} is
for \code{mean-SD} transformation.}

\item{margin}{Option to either transform the data \code{2 == column-wise} or
\code{1 == row-wise}. Defaults to \code{column-wise} transformation if no option is
indicated.}
}
\value{
This function returns the output of the data transformation process
as
\item{\code{tata_transformed}}{ A new \code{data.frame} containing the
transformed values}
}
\description{
Often economic and other \strong{Machine Learning} data are of different units
or sizes making either estimation, interpretation or visualization difficult.
The solution to these issues can be handled if the data can be transformed
into \emph{unitless} or data of similar magnitude. This is what \code{data_transform}
is set to do. It is simple and straight forward to use.
}
\examples{

library(Dyn4cast)
# View the data without transformation

data0 <- Transform \%>\%
pivot_longer(!X, names_to = "Factors", values_to = "Data")

ggplot(data = data0, aes(x = X, y = Data, fill = Factors, color = Factors)) +
  geom_line() +
  scale_fill_brewer(palette = "Set1") +
  scale_color_brewer(palette = "Set1") +
  labs(y = "Data", x = "Series", color = "Factors") +
  theme_bw(base_size = 12)

# Example 1: Transformation by min-max method.
# You could also transform the `X column` but is is better not to.

data1 <- data_transform(Transform[, -1], 1)
data1 <- cbind(Transform[, 1], data1)
data1 <- data1 \%>\%
  pivot_longer(!X, names_to = "Factors", values_to = "Data")

ggplot(data = data1, aes(x = X, y = Data, fill = Factors, color = Factors)) +
  geom_line() +
  scale_fill_brewer(palette = "Set1") +
  scale_color_brewer(palette = "Set1") +
  labs(y = "Data", x = "Series", color = "Factors") +
  theme_bw(base_size = 12)

# Example 2: `log` transformation

data2 <- data_transform(Transform[, -1], 2)
data2 <- cbind(Transform[, 1], data2)
data2 <- data2 \%>\%
  pivot_longer(!X, names_to = "Factors", values_to = "Data")

ggplot(data = data2, aes(x = X, y = Data, fill = Factors, color = Factors)) +
  geom_line() +
  scale_fill_brewer(palette = "Set1") +
  scale_color_brewer(palette = "Set1") +
  labs(y = "Data", x = "Series", color = "Factors") +
  theme_bw(base_size = 12)

# Example 3: `Mean-SD` transformation

data3 <- data_transform(Transform[, -1], 3)
data3 <- cbind(Transform[, 1], data3)
data3 <- data3 \%>\%
  pivot_longer(!X, names_to = "Factors", values_to = "Data")

ggplot(data = data3, aes(x = X, y = Data, fill = Factors, color = Factors)) +
  geom_line() +
  scale_fill_brewer(palette = "Set1") +
  scale_color_brewer(palette = "Set1") +
  labs(y = "Data", x = "Series", color = "Factors") +
  theme_bw(base_size = 12)

}
